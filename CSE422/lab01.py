# -*- coding: utf-8 -*-
"""20201120_Lab01_09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B_2Na3JTVgYYKmNIRvDpfJn2jWUyAKl5
"""

import heapq

def astar(graph, start_node, destination, heuristic):
    lst = [(heuristic[start_node], start_node)]        #[lst is initialized as a priority queue]
    cost = {start_node: 0}                        #[cost dict is initialized to store the actual cost from the start node to each node visited so far]
    parent = {}                              #[for keeping track of the parent node]

    while lst:
        _, present_node = heapq.heappop(lst)

        if present_node == destination:
            path = []
            while present_node in parent:
                path.append(present_node)
                present_node = parent[present_node]
            path.append(start_node)
            path.reverse()
            return path

        for neighbor, dist in dict1[present_node]:
            actual_cost = cost[present_node] + dist        #[adding the path cost of the neighboring nodes]

            if neighbor not in cost or actual_cost < cost[neighbor]:
                cost[neighbor] = actual_cost                              #[selecting the lowest cost]
                estimated_cost = actual_cost + heuristic[neighbor]        #[adding the heuristic value with the selected path cost]
                heapq.heappush(lst, (estimated_cost, neighbor))
                parent[neighbor] = present_node

    return None


dict1 = {
    'arad': [('zerind', 75), ('timisoara', 118), ('sibiu', 140)],
    'zerind': [('arad', 75), ('oradea', 71)],
    'oradea': [('zerind', 71), ('sibiu', 151)],
    'sibiu': [('arad', 140), ('oradea', 151), ('fagaras', 99), ('rimnicu vilcea', 80)],
    'rimnicu vilcea': [('sibiu', 80), ('craiova', 146), ('pitesti', 97)],
    'craiova': [('dobreta', 120), ('rimnicu vilcea', 146), ('pitesti', 138)],
    'dorbreta': [('mehadia', 75), ('craiova', 120)],
    'mehadia': [('dorbreta', 75), ('lugoj', 70)],
    'lugoj': [('mehadia', 70), ('timisoara', 111)],
    'timisoara': [('lugoj', 111), ('arad', 118)],
    'pitesti': [('craiova', 138), ("rimnicu vilcea", 97), ('bucharest', 101)],
    'bucharest': [('giurgui', 90), ('pitesti', 101), ('fagaras', 211), ('urziceni', 85)],
    'fagaras': [('sibiu', 99), ('bucharest', 211)],
    'urziceni': [('bucharest', 85), ('hirsova', 98), ('vaslui', 142)],
    'hirsova': [('eforie', 86),('urziceni', 98)],
    'vaslui': [('urziceni', 142), ('lasi', 92)],
    'lasi': [('valsui', 92), ('neamt', 87)],
    }

heuristic_val = {
    'arad': 366,
    'bucharest': 0,
    'craiova': 160,
    'drobeta': 242,
    'eforie': 161,
    'fagaras': 176,
    'hirsova': 151,
    'lasi': 226,
    'lugoj': 244,
    'mehadia': 241,
    'neamt': 234,
    'oradea': 380,
    'pitesti': 100,
    'rimnicu vilcea': 193,
    'sibiu': 176,
    'timisoara': 329,
    'urziceni': 80,
    'vaslui': 199,
    'zerind': 374
}

start_node = 'arad'
destination = 'bucharest'
path = astar(dict1, start_node, destination, heuristic_val)

if path is None:
    print("NO PATH FOUND")
else:
    print("Path:", " -> ".join(path))

    total_dist = sum(dict1[node][0][1] for node in path[:-1])

    print("Total distance:", total_dist, "km")