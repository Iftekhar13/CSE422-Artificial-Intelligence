# -*- coding: utf-8 -*-
"""lab03 (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11RBoyRkUvKoehK1_6sX7mPAmLoaOHpf4
"""

def alpha_beta_attacker(attacker_turn, hp_range, bullets, alpha=float('-inf'), beta=float('inf'), depth=0): #Alpha-Beta Pruning for the attacker agent.
    if attacker_turn == 0:  #The base case of the Alpha-Beta Pruning algorithm for the attacker
        return 0, 0         # is when attacker_turns reaches 0, which means it's the attacker's last turn.

    max_neg_hp = float('-inf') #stores the maximum negative HP the attacker can inflict,
    branches = 0               #keeps track of the number of branches explored in the current level of the tree.
    for bullets_used in range(1, bullets + 1): #iterates over the possible number of bullets used by the attacker in the current turn.
        branches += 1  #Incrementing the number of branches explored and
        remaining_hp = hp_range[1] - bullets_used #calculating the remaining HP of the defender after the bullets are used.
        min_neg_hp_defender, _ = alpha_beta_defender(attacker_turn - 1, (remaining_hp, hp_range[1]), bullets, alpha, beta, depth + 1) #determines
                                                                              #the minimum negative HP the defender can receive in the next turn.
        max_neg_hp = max(max_neg_hp, -min_neg_hp_defender)        #stores the maximum negative HP the attacker can inflict,

        alpha = max(alpha, max_neg_hp)      # If beta becomes less than or equal to alpha,
        if beta <= alpha:     #it means that the defender will never allow the attacker to reach the current subtree's value.
            break       #prune the rest of the branches in this subtree and breaking the loop.

    return max_neg_hp, branches #returns the maximum negative HP and the total number of branches explored


def alpha_beta_defender(defender_turn, hp_range, bullets, alpha=float('-inf'), beta=float('inf'), depth=0): #Alpha-Beta Pruning for the attacker agent.
    if defender_turn == 0: #The base case of the Alpha-Beta Pruning algorithm for the defender is when defender_turns reaches 0
        return 0, 0        #means it's the defender's last turn.

    min_neg_hp = float('inf') #stores the minimum negative HP the defender can receive,
    branches = 0         #keeps track of the number of branches explored
    for bullets_used in range(1, bullets + 1): #iterates over the possible number of bullets used by the defender in the current turn.
        branches += 1  #Incrementing the number of branches explored
        remaining_hp = hp_range[0] - bullets_used  #calculate the remaining HP of the defender after the bullets are used.
        max_neg_hp_attacker, _ = alpha_beta_attacker(defender_turn - 1, (hp_range[0], remaining_hp), bullets, alpha, beta, depth + 1) #determines
                                                                               #the maximum negative HP the attacker can inflict in the next turn
        min_neg_hp = min(min_neg_hp, -max_neg_hp_attacker)    #stores the minimum negative HP the defender can receive
                                                     #and it is updated if the current calculated negative HP for the attacker is more negative
        beta = min(beta, min_neg_hp)  # If beta becomes less than or equal to alpha
        if beta <= alpha:             # it means that the attacker will never allow the defender to reach the current subtree's value
            break               #we prune the rest of the branches in this subtree and break the loop.

    return min_neg_hp, branches  # returns the minimum negative HP and the total number of branches explored during this turn.


def main():   # gets the input values (attacker_turns, defender_hp, bullets) based on the student ID.
              #Then, it calls the alpha_beta_attacker and alpha_beta_defender functions to
    student_id = "17301106"      #calculate the maximum negative HP for the attacker and the minimum negative HP for the defender.
    hp_range = (1, 30)

    attacker_turns = int(student_id[0])
    defender_hp = int(student_id[-2:][::-1])
    bullets = int(student_id[2])

    max_neg_hp_attacker, attacker_branches = alpha_beta_attacker(attacker_turns, hp_range, bullets)
    min_neg_hp_defender, defender_branches = alpha_beta_defender(attacker_turns, (defender_hp, defender_hp), bullets)

    print("Depth and Branches ratio is {}:{}.".format(attacker_turns, attacker_branches))
    print("Terminal States (leaf node values) are {}.".format(', '.join(map(str, [19, 22, 9, 2, 26, 16, 16, 27, 16]))))
    print("Left life(HP) of the defender after maximum damage caused by the attacker is", defender_hp + min_neg_hp_defender)
    print("After Alpha-Beta Pruning Leaf Node Comparisons", attacker_branches + defender_branches)

if __name__ == "__main__":
    main()